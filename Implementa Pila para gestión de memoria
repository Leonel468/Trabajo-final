// Estructura para la pila de memoria
struct NodoMemoria {
    string procesoID;
    NodoMemoria* siguiente;
};

// Variable global para la pila
NodoMemoria* pilaMemoria = NULL;

// Función push para asignar memoria
void pushMemoria() {
    string id;
    cout << "Ingrese el ID del proceso para asignar memoria: ";
    cin >> id;
    NodoMemoria* nuevo = new NodoMemoria;
    nuevo->procesoID = id;
    nuevo->siguiente = pilaMemoria;
    pilaMemoria = nuevo;
    cout << "Memoria asignada correctamente al proceso.\n";
    cout << "---------------------------------------------\n";
}

// Función pop para liberar memoria
void popMemoria() {
    if (!pilaMemoria) {
        cout << "La memoria ya esta vacia.\n";
    } else {
        cout << "Liberando memoria del proceso ID: " << pilaMemoria->procesoID << "\n";
        NodoMemoria* temp = pilaMemoria;
        pilaMemoria = pilaMemoria->siguiente;
        delete temp;
    }
    cout << "---------------------------------------------\n";
}

// Función para mostrar estado de memoria
void mostrarMemoria() {
    if (!pilaMemoria) {
        cout << "La memoria esta vacia.\n";
    } else {
        NodoMemoria* temp = pilaMemoria;
        int pos = 1;
        cout << "Estado actual de la memoria (tope -> fondo):\n";
        while (temp) {
            cout << "Posicion " << pos++ << ": " << temp->procesoID << "\n";
            temp = temp->siguiente;
        }
    }
    cout << "---------------------------------------------\n";
}
