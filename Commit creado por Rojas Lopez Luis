// Busca un proceso por su ID en la lista de procesos
Proceso* buscarProcesoID(string id) {
    Proceso* actual = listaProcesos; // Empezamos desde el primer proceso
    while (actual) {                 // Recorremos todos los procesos uno por uno
        if (actual->id == id)       // Si encontramos el ID que buscamos
            return actual;          // Retornamos ese proceso
        actual = actual->siguiente; // Si no, seguimos al siguiente proceso
    }
    return NULL;                    // Si no lo encontramos, devolvemos NULL (nada)
}

// Pide datos al usuario y crea un nuevo proceso, luego lo añade al final de la lista
void insertarProceso() {
    string id, nombre;
    int prioridad;

    // Pedimos un ID que no exista para que sea único
    do {
        cout << "Ingrese ID del proceso: ";
        cin >> id;
        if (buscarProcesoID(id)) { // Si ya existe un proceso con ese ID
            cout << "Error: El ID ya existe. Ingrese un ID unico.\n";
        }
    } while (buscarProcesoID(id)); // Repetimos hasta que sea único

    cout << "Ingrese nombre del proceso: ";
    cin >> nombre; // Pedimos el nombre

    // Pedimos la prioridad, que debe ser un número entero no negativo
    do {
        cout << "Ingrese prioridad (entero no negativo): ";
        cin >> prioridad;
        if (prioridad < 0) {
            cout << "Error: La prioridad no puede ser negativa. Intente nuevamente.\n";
        }
    } while (prioridad < 0);

    // Creamos el nuevo proceso con los datos ingresados
    Proceso* nuevo = new Proceso(id, nombre, prioridad);

    // Si la lista está vacía, el nuevo proceso será el primero
    if (!listaProcesos) {
        listaProcesos = nuevo;
    } else {
        // Si no está vacía, recorremos hasta el final para añadir el nuevo proceso
        Proceso* actual = listaProcesos;
        while (actual->siguiente)
            actual = actual->siguiente;
        actual->siguiente = nuevo; // Enlazamos el nuevo proceso al final
    }
    cout << "Proceso insertado correctamente.\n";
    cout << "---------------------------------------------\n";
}

// Muestra todos los procesos que existen en la lista
void mostrarProcesos() {
    if (!listaProcesos) { // Si la lista está vacía
        cout << "No hay procesos registrados.\n";
    } else {
        Proceso* actual = listaProcesos; // Empezamos desde el primero
        cout << "Lista de procesos:\n";
        // Recorremos todos los procesos y mostramos su info
        while (actual) {
            cout << "ID: " << actual->id
                 << " | Nombre: " << actual->nombre
                 << " | Prioridad: " << actual->prioridad << "\n";
            actual = actual->siguiente; // Pasamos al siguiente
        }
    }
    cout << "---------------------------------------------\n";
}

// Borra un proceso de la lista usando su ID
void eliminarProceso() {
    string id;
    cout << "Ingrese el ID del proceso a eliminar: ";
    cin >> id;
    Proceso* actual = listaProcesos;
    Proceso* anterior = NULL; // Para guardar el proceso anterior y poder enlazar

    // Buscamos el proceso con el ID dado
    while (actual && actual->id != id) {
        anterior = actual;          // Guardamos el proceso actual como anterior
        actual = actual->siguiente; // Seguimos al siguiente proceso
    }

    if (!actual) { // Si no encontramos el proceso
        cout << "Proceso no encontrado.\n";
    } else {
        // Si el proceso está al inicio de la lista
        if (!anterior)
            listaProcesos = actual->siguiente; // La lista empieza desde el siguiente
        else
            anterior->siguiente = actual->siguiente; // Enlazamos anterior con siguiente

        delete actual; // Liberamos la memoria del proceso eliminado
        cout << "Proceso eliminado correctamente.\n";
    }
    cout << "---------------------------------------------\n";
}

// Busca un proceso por su nombre y muestra su información si lo encuentra
void buscarProcesoPorNombre() {
    string nombre;
    cout << "Ingrese el nombre del proceso a buscar: ";
    cin >> nombre;
    Proceso* actual = listaProcesos;
    bool encontrado = false;

    // Recorremos la lista buscando el nombre que ingresamos
    while (actual) {
        if (actual->nombre == nombre) {
            cout << "Proceso encontrado:\n";
            cout << "ID: " << actual->id << " | Nombre: " << actual->nombre << " | Prioridad: " << actual->prioridad << "\n";
            encontrado = true;
            break; // Salimos si lo encontramos
        }
        actual = actual->siguiente; // Pasamos al siguiente proceso
    }

    if (!encontrado) {
        cout << "Proceso no encontrado.\n";
    }
    cout << "---------------------------------------------\n";
}

// Cambia la prioridad de un proceso encontrado por su ID
void modificarPrioridad() {
    string id;
    cout << "Ingrese el ID del proceso para modificar prioridad: ";
    cin >> id;

    // Buscamos el proceso con ese ID
    Proceso* p = buscarProcesoID(id);
    if (!p) {
        cout << "Proceso no encontrado.\n";
    } else {
        int nuevaPrioridad;
        cout << "Prioridad actual: " << p->prioridad << "\n";

        // Pedimos una nueva prioridad que sea número positivo o cero
        do {
            cout << "Ingrese nueva prioridad (entero no negativo): ";
            cin >> nuevaPrioridad;
            if (nuevaPrioridad < 0) {
                cout << "Error: La prioridad no puede ser negativa. Intente nuevamente.\n";
            }
        } while (nuevaPrioridad < 0);

        // Actualizamos la prioridad del proceso
        p->prioridad = nuevaPrioridad;
        cout << "Prioridad modificada correctamente.\n";
    }
    cout << "---------------------------------------------\n";
}
